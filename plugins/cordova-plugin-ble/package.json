{
  "name": "cordova-plugin-ble",
  "version": "2.0.1",
  "description": "Bluetooth Low Energy Cordova plugin",
  "cordova": {
    "id": "cordova-plugin-ble",
    "platforms": [
      "android",
      "ios"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/evothings/cordova-ble.git#2.0.1"
  },
  "keywords": [
    "bluetooth",
    "ble",
    "bluetooth low energy",
    "bluetooth smart",
    "ecosystem:cordova",
    "cordova-android",
    "cordova-ios"
  ],
  "engines": [
    {
      "name": "cordova",
      "version": ">=6.0.0"
    }
  ],
  "author": {
    "name": "Evothings"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/evothings/cordova-ble/issues"
  },
  "homepage": "https://github.com/evothings/cordova-ble#readme",
  "readme": "# Cordova BLE Plugin\n\nThis plugin implements BLE support for Android, iOS and Windows 8.1 (partial support). Enable your Cordova and PhoneGap mobile applications to communicate with all sorts of BLE devices.\n\nAvailable functionality:\n\n* Scan for BLE devices (background scanning supported on iOS and Android)\n* Establish connections\n* List services, characteristics and descriptors\n* Read and write the values of characteristics and descriptors\n* Request notification of changes to the values of characteristics\n* Poll RSSI (signal strength) of a device (Android and iOS only)\n* Experimental support for Peripheral mode on Android\n\n## Installation\n\nInstall using the Apache Cordova command line:\n\n    cordova plugin add cordova-plugin-ble\n\n## Updated BLE Plugin API\n\nWe have extended the BLE plugin API to make it more high-level and easy to use.\n\nFunctions can now take objects as parameters.\n\nThe new plugin API is fully backwards compatible with the previous API, which used handles rather than objects.\n\nWe recommend using the new style with object parameters.\n\nBelow is tour of the new BLE plugin API.\n\n## Quick Guide\n\n### Scan for devices\n\nUse function `evothings.ble.startScan` to scan for devices:\n\n    evothings.ble.startScan(onDeviceFound, onScanError, options)\n\nStarts scanning for devices. An array of service UUID strings may be given in the options object parameter. One or more service UUIDs must be specified for iOS background scanning to work. Found devices and errors are reported to the supplied callback functions. The startScan function will keep scanning until you call `evothings.ble.stopScan`.\n\nParameters:\n\n    @param {scanCallback} onDeviceFound - Success callback, called repeatedly\n    for each found device.\n    @param {failCallback} onScanError - Error callback.\n    @param {ScanOptions} options - Optional object with options.\n    Set field serviceUUIDs to an array of service UUIDs to scan for.\n    Set field parseAdvertisementData to false to disable automatic\n    parsing of advertisement data.\n\nExamples:\n\n    // Scan for all services.\n    evothings.ble.startScan(\n        function(device)\n        {\n            console.log('startScan found device named: ' + device.name);\n        },\n        function(errorCode)\n        {\n            console.log('startScan error: ' + errorCode);\n        }\n    );\n\n    // Scan for specific service (Eddystone Service UUID).\n    evothings.ble.startScan(\n        function(device)\n        {\n            console.log('startScan found device named: ' + device.name);\n        },\n        function(errorCode)\n        {\n            console.log('startScan error: ' + errorCode);\n        },\n        { serviceUUIDs: ['0000feaa-0000-1000-8000-00805f9b34fb'] }\n    );\n\n\n### Connect to a device\n\nUse function `evothings.ble.connectToDevice` to connect to a device:\n\n    evothings.ble.connectToDevice(device, onConnected, onDisconnected, onConnectError, options)\n\nConnect to a BLE device and discover services. This is a more high-level\nfunction than `evothings.ble.connect`. You can configure which services\nto discover and also turn off automatic service discovery by supplying\nan options parameter.\n\nParameters:\n\n    @param {DeviceInfo} device - Device object from {scanCallback}.\n    @param {connectedCallback} onConnected - Called when connected to the device.\n    @param {disconnectedCallback} onDisconnected - Called when disconnected from the device.\n    @param {failCallback} onConnectError - Called on error.\n    @param {ConnectOptions} options - Optional connect options object.\n\nExample:\n\n    evothings.ble.connectToDevice(\n         device,\n         function(device)\n         {\n             console.log('Connected to device: ' + device.name);\n         },\n         function(device)\n         {\n             console.log('Disconnected from device: ' + device.name);\n         },\n         function(errorCode)\n         {\n             console.log('Connect error: ' + errorCode);\n         });\n\nIt is recommended to use this functions in place of the low-level `evothings.ble.connect` function, which does not do automatic service discovery and has a different callback interface.\n\n### Get services, characteristics and descriptors\n\n#### evothings.ble.getService\n\nUse `evothings.ble.getService` to get a service by UUID:\n\n    evothings.ble.getService(device, uuid)\n\nParameters:\n\n    @param {DeviceInfo} device - Device object.\n    @param {string} uuid - UUID of service to get.\n\n#### evothings.ble.getCharacteristic\n\nUse `evothings.ble.getCharacteristic` to get a characteristic by UUID:\n\n    evothings.ble.getCharacteristic(service, uuid)\n\nParameters:\n\n    @param {Service} device - Service object.\n    @param {string} uuid - UUID of characteristic to get.\n\nCharacteristics within a service that share the same UUID (rare case) must be retrieved by manually traversing the characteristics array of the service. The function getCharacteristic will return the first characteristic found, which may not be the one you want. Note that this is a rare case.\n\n#### evothings.ble.getDescriptor\n\nUse `evothings.ble.getDescriptor` to get a characteristic by UUID:\n\n    evothings.ble.getDescriptor(characteristic, uuid)\n\nParameters:\n\n    @param {Characteristic} characteristic - Characteristic object.\n    @param {string} uuid - UUID of descriptor to get.\n\n### Reading, writing and notifications\n\n#### evothings.ble.readCharacteristic\n\nUse `evothings.ble.readCharacteristic` to write a characteristic:\n\n    evothings.ble.readCharacteristic(device, characteristic, success, fail)\n\nParameters:\n\n    @param {DeviceInfo} device - Device object.\n    @param {Characteristic} characteristic - Characteristic object.\n    @param {dataCallback} success\n    @param {failCallback} fail\n\nExample:\n\n    // When connected to the device, get the desired service and characteristic.\n    var service = evothings.ble.getService(device, SERVICE_UUID)\n    var characteristic = evothings.ble.getCharacteristic(service, CHARACTERISTIC_UUID)\n\n    // Read the characteristic.\n    evothings.ble.readCharacteristic(\n        device,\n        characteristic,\n        function(data)\n        {\n            console.log('characteristic data: ' + evothings.ble.fromUtf8(data));\n        },\n        function(errorCode)\n        {\n            console.log('readCharacteristic error: ' + errorCode);\n        });\n\n\n#### evothings.ble.writeCharacteristic\n\nUse `evothings.ble.writeCharacteristic` to write a characteristic:\n\n    evothings.ble.writeCharacteristic(device, characteristic, data, success, fail)\n\nParameters:\n\n    @param {DeviceInfo} device - Device object.\n    @param {Characteristic} characteristic - Characteristic object.\n    @param {ArrayBufferView} data - The value to be written.\n    @param {emptyCallback} success - Called when the remote device has\n    confirmed the write.\n    @param {failCallback} fail - Called if the operation fails.\n\nExample:\n\n    // When connected to the device, get the desired service and characteristic.\n    var service = evothings.ble.getService(device, SERVICE_UUID)\n    var characteristic = evothings.ble.getCharacteristic(service, CHARACTERISTIC_UUID)\n\n    // Read the characteristic.\n    evothings.ble.writeCharacteristic(\n        device,\n        characteristic,\n        data, // Buffer view with data to write\n        function()\n        {\n            console.log('characteristic written');\n        },\n        function(errorCode)\n        {\n            console.log('writeCharacteristic error: ' + errorCode);\n        });\n\n#### evothings.ble.enableNotification\n\nUse `evothings.ble.enableNotification` to start notifications on a characteristic:\n\n    evothings.ble.enableNotification(device, characteristic, success, fail)\n\nParameters:\n\n    @param {DeviceInfo} device - Device object .\n    @param {Characteristic} characteristic - Characteristic object.\n    @param {dataCallback} success - Called every time the value changes.\n    @param {failCallback} fail - Error callback.\n    @param {NotificationOptions} options - Android only: Optional object with options.\n\nExample:\n\n    // When connected to the device, get the desired service and characteristic.\n    var service = evothings.ble.getService(device, SERVICE_UUID)\n    var characteristic = evothings.ble.getCharacteristic(service, CHARACTERISTIC_UUID)\n\n    // Start notifications for the characteristic.\n    evothings.ble.enableNotification(\n        device,\n        characteristic,\n        function()\n        function(data)\n        {\n            console.log('characteristic data: ' + evothings.ble.fromUtf8(data));\n        },\n        function(errorCode)\n        {\n            console.log('readCharacteristic error: ' + errorCode);\n        });\n\n## Documentation\n\nThe [BLE API Guide](http://evothings.com/doc/tutorials/evothings-ble-api-guide.html) contains step-by-step instructions for how to scan and connect to BLE devices.\n\nReference documentation is available as jsdoc comments in the [ble.js](https://github.com/evothings/cordova-ble/blob/master/ble.js) source file.\n\nTo build the documentation using [jsdoc](https://github.com/jsdoc3/jsdoc), run this command:\n\n    jsdoc -l -c jsdoc/conf.json ble.js\n\n[Generated documentation](https://evothings.com/doc/lib-doc/module-cordova-plugin-ble.html) is available at the Evothings documentation web site (note that this documentation may not reflect the latest updates of the plugin, it may lag to sync with Evothings releases).\n\n<!--The file [introduction.md](introduction.md) contains a general introduction to BLE programming.-->\n\n<!-- Read the [BLE app development tutorial](http://evothings.com/ble-app-development-explained/) to get started with your BLE mobile application. -->\n\n## Libraries\n\nThis section lists libraries that runs on top of the BLE plugin.\n\n### Web Bluetooth\n\nEarly support for Web Bluetooth is available using the Bleat library.\n\n* Master repository: https://github.com/thegecko/bleat\n* Example app: https://github.com/evothings/cordova-ble/blob/master/examples/webbluetooth\n* Tutorial: https://evothings.com/evothings-studio-with-support-for-web-bluetooth-and-ecmascript-6/\n\n### EasyBLE\n\nThe EasyBLE library has been deprecated and is replaced with the extended BLE plugin API.\n\n### Eddystone\n\nLibrary for scanning for Eddystone devices/beacons (Physical Web).\n\n* Master repository:  https://github.com/evothings/evothings-libraries/tree/master/libs/evothings/eddystone\n* Documentation: https://evothings.com/doc/lib-doc/evothings.eddystone.html\n* Tutorial: https://evothings.com/doc/starter-guides/eddystone-starter-guide.html\n* JavaScript file to include in index.html: https://github.com/evothings/evothings-libraries/tree/master/libs/evothings/eddystone/eddystone.dist.js\n\nTo use the Eddystone library, include this in index.html:\n\n    <script src=\"eddystone.dist.js\"></script>\n\n## Use Evothings Studio for fast and easy BLE mobile app development\n\n[![BLE Mobile App Development Video](http://evomedia.evothings.com/2013/11/youtube_ble_example_start.png)](http://www.youtube.com/watch?v=A7uxNS_0QOI)\n\nThis plugin is used in Evothings Studio, and is compatible with Apache Cordova and PhoneGap.\n\n[Evothings Studio](http://evothings.com) is a development and prototyping tool for making Cordova/PhoneGap apps. With Evothings Studio the edit/run turn-around cycle is just a second or two, which is much faster compared to the traditional method of rebuilding the Cordova project for each update.\n\n[![Evothings Studio Workflow](http://evomedia.evothings.com/2013/11/illustration_ble_plugin.jpg)](http://evothings.com)\n\nSee [Evothings Examples](http://evothings.com/doc/examples/examples.html) for comprehensive examples of mobile apps that communicate over Bluetooth Low Energy, and which you can use for your own projects to get quickly up and running.\n\n## Download Evothings Studio\n\n[Download Evothings Studio](http://evothings.com/download/) - It is easy to get started!\n",
  "readmeFilename": "README.md",
  "_id": "cordova-plugin-ble@2.0.1",
  "dist": {
    "shasum": "bae3aa56c021e266cb0daa82323854ad1ab8f8c6"
  },
  "_from": "cordova-plugin-ble@",
  "_resolved": "https://registry.npmjs.org/cordova-plugin-ble/-/cordova-plugin-ble-2.0.1.tgz"
}
